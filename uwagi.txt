
1. Beda sobie dwa watki (GUI i kontroli gry),
Controller wywoluje funkcje odpowiadające za kolejne fazy gry,
jezeli cos potrzebuje jakiejs informacji od gracza
to bierze sobie od gui EventReceiver.

2. Selekcje: karta mowi czego porzebuje (pojedynczej karty, kolumny, ...),
selector pozwala na wybieranie, po kazdej modyfiykacji wyboru
wywoluje sprawdzenie poprawnosci selekcji (mysle ze poprawnie zalozylem
ze podzbior poprawnego wyboru jest zawsze poprawny)

3. Karty specjalne (typu terror) -
mysle, ze pienknie sie tej sprawy nie rozwiaze -
narazie mam taki pomysl, ze trzymamy zestaw obowiazujacych w danym momencie efektow,
w odpowiednich momentach ifujemy czy jakis efekt nie obowiazuje.

4. Jak napiszecie //TODO, w Tasks (nie Task List)
pojawi sie to miejsce na liscie (przydatne np. zeby nie zapomniec czegos w kodzie)

5. Plansza to tablica kart, a nie tablica list kart!
Karty typu człowiek, auto, i inne ktore lamia zasade "jedna karta na jednym polu" beda "efektami" (czyt. zajmiemy sie nimi pozniej,
nie bojcie sie ze ciezko bedzie je dodac, mam plan, w sumie tego, ze mam plan mozecie sie bac :P)

6. Karty na 1. tydzien (im wiecej tym lepiej, z wykrzyknikiem to karty ktore koniecznie chcialbym zobaczyc)
Jak widac, odradzam podzial ze jeden robi zombiakow, inny ludzi.
Zombiakow:
Głód - ZROBIONE
Masa! (olejcie to zalozenie, ze zombi ma sie juz w turze nie ruszac) - ZROBIONE
Mięso - ZROBIONE
Pazury - ZROBIONE
Spadaj!
Zombi! - ZROBIONE

Ludzi:
Granat - ZROBIONE
Krew (sprawdzajcie tylko, czy wybrane pole jest puste)
Reflektor! - ZROBIONE
Ropa! - ZROBIONE
Seria (nie sprawdzajcie czy ktos jest chroniony czlowiekiem, mozna sie cofnac jake pole jest puste) - ZROBIONE
Snajper - ZROBIONE
Strzał - ZROBIONE
Ulica w ogniu
Wynocha!
Zmiataj - ZROBIONE

Preferowalbym zeby karty mialy jak najwiecej wspolnych cech,
np. jestem za tym, by wszystkie karty mialy zmienna sila, jak karta tej zmiennej nie potrzebuje to nic to nie przeskadza, a duzo prosciej
bedzie takie karty wyswietlac (brak switcha na to co my wlasciwie wyswietlac mamy)

7. Wszystko mniej lub bardziej testujcie, np. test selektora moze wygladac tak,
ze podpinamy mu cos co generuje losowe eventy i karte ktora akceptuje tylko konkretna selekcje i patrzymy czy zwroci to co chcielismy.
Test powinien najlepiej dotyczyc jakiejs jednej klasy (grup klas), ktora spinamy ze sztucznymi klasami, ktore sa potrzebne.

8. Wykryte bugi mozecie zglaszac przez Issues.

9. Jak macie jakiekolwiek watpliwosci to piszcie na gmaila, gtalka, gadu, telefon, zwykle jestem online 24/7.

10. Jezeli commit sie nie uda (rejected, czy cos), to w Git Repositories:
pullnijce
zmergujcie
zcommitujcie (potwierdzcie, potem commit and push)
Dzieje sie tak gdy, pomiedzy waszym pullem, a commitem i pushem, ktos inny zcommitowal i zpushowal, wtedy wy musicie domergowac wlasny kod.

11. Unikajcie jakichkolwiek warningow, w ekstreamalnych (bardzo) sytuacjach supresujcie.

12. O Kartach rzeczy kilka:
- karty powinny byc takie same - jakis zestaw zmiennych, 2 funkcje i tyle.
	Jezeli jakas karta czegos nie potrzebuje to w danej zmiennej trzyma null.
	Wynika to z tego ze nie chcemy miec w gui switchy - jak karta zombiak wyswietlamy tak, jak inaczej, to inaczej.
- sugeruje zrobienie podobnych klas "ulatwiajacych" sprawdzanie poprawnosc selekcji, dla funkcje makeEffect,
	czyli np. zadajObrazenia, cofnij, itp. Nie powinno byc tak, ze karta zombiak bedzie implementowala metode cofnij sie,
	kod wyszedlby gorszy - trust me - chociazby nie dalo by sie uniknac brzydkiego rzutowania, ktore pojawia sie np. przy selekcjach,
	patrzymy na karte - kodzimy jak sie wybiera jej obszar dzialania, kodzimy jej efekt i to wszystko w tej wlasnie karcie.
- jezeli w wyniku jakiegos zagrania jakiejs karty zombiaki wygrywaja, funkcja makeEffect ma rzucic wyjatek GameOver(Player.ZOMBIE),
 	nie dodawajcie throws - to jest runtimeException.
- karty nie moga byc modyfikowalne! board musi wiedziec ze karta sie zmienila, zeby powiedziec o tym gui,
	wiec potrzeba zmiany karty niech tworzy nowa karte i ja dodaje na planszy.
- jezeli potrzeba to w groupselection kolejnosc ma znaczenie! (chyba np. taka ropa tego potrzebuje),
	czyli selektor powinien dbac by dodana karta byla na koncu listy
	oraz ze usuniecie karty (o ile w ogole isSelectionCorrect sie na nie zgodzi)
	nie powinno psuc porzadku.

13. Kiedy Integer, a kiedy int? Ja bym robil tak: zmienne pomocnicze moga byc intami, ale nie musza, za to zmienne w klasie to Integer,
pewno sie zdarzy nie raz, ze wykorzystamy to, ze mozemy tam sobie trzymac null-a.

14. Uklad rzeczy w klasie: ja bym robil tak:
na gorze zmienne, potem konstrutkor, potem metody prywatne, potem metody publiczne.

15. Do kazdej klasy zrobcie jakiegos javadoca, moze byc ultraprosty.
Jak jest jakas funkcja co do niech koniecznie chcecie zrobic javadoca to nie odmawiam,
ale wydaje mi sie ze starczy 1 prosty komentarz na klase.
javaDoc generujemy: Project/Generate JavaDoc..., zaznaczanie zombiaki i next next next...
Gitowi ustawilem by ignorowal folder docsow - za duzo syfu sie robi na stronie, kazdy moze generowac sobie sam.

16. Zajmijcie sie wpierw kartami ktore powyzej zapodalem!

17. Wszystkie rzeczy to testow powinny byc w katalogu src/test/java, nie ma to wplywu na to czego mozecie uzywac.

18. Fake egzmeplarze klas do testow mozecie tworzyc anonimowo,
nie dodawajcie do normalnych klas dodatkow tylko potrzebnych do testow

19. Jezeli karta nie potrzebuje selekcji getSelectionType() zwraca null, i makeEffect dostaje nulla zamiast selekcji.
