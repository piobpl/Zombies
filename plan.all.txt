[pakiet]
 - [klasa]
	:[składowa]

model
 - enum Card
	:selectionType
	:abstract isSelectionCorrect(Selection)
	:abstract makeEffect(Selection, GameState)
 - Effects
	 - enum Effect
 - Deck
 - Hand
 - Board
 - GameState

view
 - Cell
	:Cell(JPanel)
 - Hand
	:Hand(JPanel)
 - Board
	:Board(JPanel)
 - GUI
	:getEventReceiver()
 - EventReceiver
	 - enum EventType
	 - abstract Event
	 - BoardClickedEvent extends Event
	 - HandClickedEvent extends Event
	 - ApplyButtonClickedEvent extends Event
	 - CancelButtonClickedEvent extends Event
	:Event getNextEvent()
	
controller
 - abstract Selection
	 - CellSelection
	 - ColumnSelection
	 - GroupSelection
	 - HandSelection
 - Selector
	:static getSelection(Card)
 - Controller
	:advancingStage()
	:drawingStage()
	:discardingStage()
	:playingStage()
	:game()
	:main()

utility
 - Pair<FirstType, SecondType>

1. Beda sobie dwa watki (GUI i kontroli gry),
Controller wywoluje funkcje odpowiadające za kolejne fazy gry,
jezeli cos potrzebuje jakiejs informacji od gracza
to bierze sobie od gui EventReceiver.

2. Selekcje: karta mowi czego porzebuje (pojedynczej karty, kolumny, ...),
selector pozwala na wybieranie, po kazdej modyfiykacji wyboru
wywoluje sprawdzenie poprawnosci selekcji (mysle ze poprawnie zalozylem
ze podzbior poprawnego wyboru jest zawsze poprawny)

3. Karty specjalne (typu terror) - 
mysle, ze pienknie sie tej sprawy nie rozwiaze - 
narazie mam taki pomysl, ze trzymamy zestaw obowiazujacych w danym momencie efektow,
w odpowiednich momentach ifujemy czy jakis efekt nie obowiazuje.

4. Jak napiszecie //TODO, w Tasks (nie Task List)
pojawi sie to miejsce na liscie (przydatne np. zeby nie zapomniec czegos w kodzie)

5. Plansza to tablica kart, a nie tablica list kart!
Karty typu człowiek, auto, i inne ktore lamia zasade "jedna karta na jednym polu" beda "efektami" (czyt. zajmiemy sie nimi pozniej,
nie bojcie sie ze ciezko bedzie je dodac, mam plan, w sumie tego, ze mam plan mozecie sie bac :P)

6. Karty na 1. tydzien (im wiecej tym lepiej, z wykrzyknikiem to karty ktore koniecznie chcialbym zobaczyc)
Jak widac, odradzam podzial ze jeden robi zombiakow, inny ludzi.
Zombiakow:
Głód
Masa! (olejcie to zalozenie, ze zombi ma sie juz w turze nie ruszac)
Mięso
Pazury
Spadaj!
Zombi!

Ludzi:
Granat
Krew (sprawdzajcie tylko, czy wybrane pole jest puste)
Reflektor!
Ropa!
Seria (nie sprawdzajcie czy ktos jest chroniony czlowiekiem, mozna sie cofnac jake pole jest puste)
Snajper
Strzał
Ulica w ogniu
Wynocha!
Zmiataj

Preferowalbym zeby karty mialy jak najwiecej wspolnych cech,
np. jestem za tym, by wszystkie karty mialy zmienna sila, jak karta tej zmiennej nie potrzebuje to nic to nie przeskadza, a duzo prosciej
bedzie takie karty wyswietlac (brak switcha na to co my wlasciwie wyswietlac mamy)

7. Wszystko mniej lub bardziej testujcie, np. test selektora moze wygladac tak,
ze podpinamy mu cos co generuje losowe eventy i karte ktora akceptuje tylko konkretna selekcje i patrzymy czy zwroci to co chcielismy.
Test powinien najlepiej dotyczyc jakiejs jednej klasy (grup klas), ktora spinamy ze sztucznymi klasami, ktore sa potrzebne.

8. Wykryte bugi mozecie zglaszac przez Issues.

9. Jak macie jakiekolwiek watpliwosci to piszcie na gmaila, gtalka, gadu, telefon, zwykle jestem online 24/7.

10. Jezeli commit sie nie uda (rejected, czy cos), to w Git Repositories:
pullnijce
zmergujcie
zcommitujcie (potwierdzcie, potem commit and push)
Dzieje sie tak gdy, pomiedzy waszym pullem, a commitem i pushem, ktos inny zcommitowal i zpushowal, wtedy wy musicie domergowac wlasny kod.

11. Unikajcie jakichkolwiek warningow, w ekstreamalnych (bardzo) sytuacjach supresujcie.
