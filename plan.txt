[pakiet]
 - [klasa]
	:[składowa]

Lobby
 - Lobby

Model
 - enum Card
	:abstract selectionType
 	:abstract isSelectionCorrect(Selection)
 	:abstract makeEffect(Selection, GameState)
 - enum Effect
 - Effects
 - Stack
 - Hand
 - Board
 - GameState

View
 - Cell
 	:static Cell registerNewCell(JPanel)
 - Hand
 	:static Hand registerNewHand(JPanel)
 - Board
 	:static Board registerNewBoard(JPanel)
 - GUI
 - abstract BoardClickedHandler
 	:clicked(int x, int y)
 - abstract HandClickedHandler
 	:clicked(boolean player, int x)
 - abstract Handler
 	:clicked()
 - GUIController
	:setBoardClickedHandler(BoardClickedHandler)
	:setHandClickedHandler(HandClickedHandler)
	:setApplyButtonHandler(Handler)
	:setCancelButtonHandler(Handler)
	:resetBoardClickedHandler()
	:resetHandClickedHandler()
	:resetApplyButtonHandler()
	:resetCancelButtonHandler()

Controller
 - abstract Selection
 - CellSelection
 - ColumnSelection
 - GroupSelection
 - HandSelection
 - abstract Selector
	:static getSelection(Card)
 - CellSelector
 - ColumnSelector
 - GroupSelector
 - HandSelector
 - Controller
 	:advancingStage()
	:drawingStage()
	:discardingStage()
	:playingStage()
	:game()

1. Beda sobie dwa watki (GUI i kontroli gry), Controller wywoluje funkcje odpowiadające za kolejne fazy gry,
jezeli cos potrzebuje jakiejs informacji od gracza to rejestruje sie w GUI i zasypia.

2. Selekcje: karta mowi czego porzebuje (pojedynczej karty, kolumny, ...),
selector pozwala na wybieranie, po kazdej modyfiykacji wyboru wywoluje sprawdzenie poprawnosci selekcji
(mysle ze poprawnie zalozylem ze podzbior poprawnego wyboru jest zawsze poprawny)

3. Karty specjalne (typu terror) - mysle, ze pienknie sie tej sprawy nie rozwiaze - 
narazie mam taki pomysl, ze trzymamy zestaw obowiazujacych w danym momencie efektow,
w odpowiednich momentach ifujemy czy jakis efekt nie obowiazuje.
