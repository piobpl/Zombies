[pakiet]
 - [klasa]
	:[składowa]

model
 - enum Card
	:selectionType
	:abstract isSelectionCorrect(Selection)
	:abstract makeEffect(Selection, GameState)
 - Effects
	 - enum Effect
 - Deck
 - Hand
 - Board
 - GameState

view
 - Cell
	:static Cell registerNewCell(JPanel)
 - Hand
	:static Hand registerNewHand(JPanel)
 - Board
	:static Board registerNewBoard(JPanel)
 - GUI
 - GUIController
	 - abstract Handler<DataType>
		:send(DataType data)
	:setBoardClickedHandler(Handler<Pair<Integer, Integer>> handler)
	:setHandClickedHandler(Handler<Integer> handler)
	:setApplyButtonHandler(Handler<Void> handler)
	:setCancelButtonHandler(Handler<Void> handler)
	:resetBoardClickedHandler()
	:resetHandClickedHandler()
	:resetApplyButtonHandler()
	:resetCancelButtonHandler()

controller
 - abstract Selection
	 - CellSelection
	 - ColumnSelection
	 - GroupSelection
	 - HandSelection
 - Selector
	:static getSelection(Card)
 - Controller
	:advancingStage()
	:drawingStage()
	:discardingStage()
	:playingStage()
	:game()
	:main()

utility
 - Courier<DataType>
	:synchronized call(DataType data)
	:synchronized DataType receive()
 - Pair<FirstType, SecondType>

1. Beda sobie dwa watki (GUI i kontroli gry),
Controller wywoluje funkcje odpowiadające za kolejne fazy gry,
jezeli cos potrzebuje jakiejs informacji od gracza
to rejestruje sie w GUI i zasypia (po to Courier - to cos ma samo czekac
az gui zlapie akcje gracza)

2. Selekcje: karta mowi czego porzebuje (pojedynczej karty, kolumny, ...),
selector pozwala na wybieranie, po kazdej modyfiykacji wyboru
wywoluje sprawdzenie poprawnosci selekcji (mysle ze poprawnie zalozylem
ze podzbior poprawnego wyboru jest zawsze poprawny)

3. Karty specjalne (typu terror) - 
mysle, ze pienknie sie tej sprawy nie rozwiaze - 
narazie mam taki pomysl, ze trzymamy zestaw obowiazujacych w danym momencie efektow,
w odpowiednich momentach ifujemy czy jakis efekt nie obowiazuje.

4. Jak napiszecie //TODO, w Tasks (nie Task List)
pojawi sie to miejsce na liscie (przydatne np. zeby nie zapomniec czegos w kodzie)
